global proc UVOffset(){if(`window -exists "UVOffset"`){deleteUI "UVOffset";}window UVOffset;columnLayout;frameLayout -collapsable 1 -l "Translation";gridLayout -numberOfColumns 3  -cellWidthHeight 40 40;symbolButton -image "CCW.bmp" -command "UVRotate 1";symbolButton -image "Up.bmp" -command "UVMove 1";symbolButton -image "CW.bmp" -command "UVRotate 2"; symbolButton -image "Left.bmp" -command "UVMove 3";floatField -w 38 -h 38 -value 1 -pre 3 OffsetValue;symbolButton -image "Right.bmp" -command "UVMove 4";symbolButton -image "ScaleU.bmp" -command "UVScale 1";symbolButton -image "Down.bmp" -command "UVMove 2";symbolButton -image "ScaleV.bmp" -command "UVScale 2";setParent..;setParent..;frameLayout -collapsable 1 -l "Tools";gridLayout -numberOfColumns 2 -cellWidthHeight 40 40;symbolButton -image "ALUVV.bmp" -command "AutoLevelUV 1" -ann "Auto Level UV Shell on U: Select two UVS as your anchor Points.";symbolButton -image "ALUVH.bmp" -command "AutoLevelUV 2" -ann "Auto Level UV Shell on V: Select two UVS as your anchor Points.";symbolButton -image "UNUF.bmp" -command "UnitUnfold" -ann "Unitize and Unfold : Select Edges for your desired Seams.";symbolButton -image "UNLT.bmp" -command "UnitLayout" -ann "Unitize and Layout : Select Edges for your Seams.";symbolButton -image "UnfoldU.bmp" -command "UnfoldLimited 1" -ann "Unfold U Constraint: UVs stay pinned in U direction.";symbolButton -image "UnfoldV.bmp" -command "UnfoldLimited 2" -ann "Unfold V Constraint: UVs stay pinned in V direction.";symbolButton -image "Corner.bmp" -command "CornerUnfold" -ann "Corner Unfold: Select 4 UVs as anchor points to snap to UV Quadrant Border.";window -edit -wh 140 600 UVOffset;showWindow UVOffset;}global proc UVMove(int $Direction){float $moveOffset = `floatField -q -value OffsetValue`; switch($Direction){case 1:polyEditUV -v $moveOffset;break;case 2:polyEditUV -v ($moveOffset *-1);break;case 3:polyEditUV -u ($moveOffset *-1);break;case 4:polyEditUV -u $moveOffset;break;default:break;}}global proc UVRotate(int $Direction){float $rotateOffset = `floatField -q -value OffsetValue`;switch($Direction){case 1:polyRotateUVs $rotateOffset;break;case 2:polyRotateUVs (-1 * $rotateOffset);break;default:break;}}global proc UVScale(int $Direction){float $scaleOffset = `floatField -q -value OffsetValue`;switch($Direction){case 1:polyEditUV -su $scaleOffset;break;case 2:polyEditUV -sv $scaleOffset;break;default:break;}}global proc UnfoldLimited(int $Axis){switch($Axis){case 1:unfold -i 5000 -ss 0.001 -gb 0 -gmb 0.5 -pub 0 -ps  0 -oa  2 -us off;break;case 2:unfold -i 5000 -ss 0.001 -gb 0 -gmb 0.5 -pub 0 -ps  0 -oa  1 -us off;break;default:break;}}global proc UnitUnfold(){int $numFaces[] = `polyEvaluate -fc`;if ($numFaces[0] != 0){string $Faces[] = `ls -sl`;polyForceUV -unitize;select -r $Faces;PolySelectConvert 20;performPolyMapSewMove 0;select -r $Faces;ConvertSelectionToUVs;unfold -i 500 -ss 0.001 -gb 0 -gmb 0.4397 -pub 0 -ps  0 -us off;select -r $Faces;polyLayoutUV -lm 1 -sc 1 -se 0 -rbf 1 -fr 1 -ps 0.2 -l 2 -ch 1;}else{string $Seam[] = `ls -sl`;polySelectSp -ring;PolySelectConvert 1;string $Shell[] = `ls -sl`;polyForceUV -unitize;select -r $Seam;polySelectSp -ring;PolySelectConvert 1;PolySelectConvert 20;select -d $Seam;performPolyMapSewMove 0;select -r $Shell;ConvertSelectionToUVs;unfold -i 500 -ss 0.001 -gb 0 -gmb 0.4397 -pub 0 -ps  0 -us off;select -r $Shell;polyLayoutUV -lm 1 -sc 1 -se 0 -rbf 1 -fr 1 -ps 0.2 -l 2 -ch 1;}}global proc UnitLayout(){int $numFaces[] = `polyEvaluate -fc`;if ($numFaces[0] != 0){string $Faces[] = `ls -sl`;polyForceUV -unitize;select -r $Faces;PolySelectConvert 20;performPolyMapSewMove 0;select -r $Faces;polyLayoutUV -lm 1 -sc 1 -se 0 -rbf 1 -fr 1 -ps 0.2 -l 2 -ch 1;}else{string $Seam[] = `ls -sl`;polySelectSp -ring;PolySelectConvert 1;string $Shell[] = `ls -sl`;polyForceUV -unitize;select -r $Seam;polySelectSp -ring;PolySelectConvert 1;PolySelectConvert 20;select -d $Seam;performPolyMapSewMove 0;select -r $Shell;polyLayoutUV -lm 1 -sc 1 -se 0 -rbf 1 -fr 1 -ps 0.2 -l 2 -ch 1;}}global proc AutoLevelUV(int $Orient){string $BaseUVS[] = `ls -sl`;switch($Orient){case 1:alignUV 0 0 1 1;break;case 2:alignUV 1 1 0 0;break;default:break;}polySelectBorderShell 0;select -d $BaseUVS;unfold -i 500 -ss 0.001 -gb 0 -gmb 0.4397 -pub 0 -ps  0 -us off;}global proc CornerUnfold(){scriptJob -ro 1 -e "SelectionChanged" "CUMove1";global string $CUCORNERS[];}global proc CUMove1(){global string $CUCORNERS[];$CUCORNERS = `ls -sl -fl`;polyEditUV -u 0 -v 0 -r false $CUCORNERS;scriptJob -ro 1 -e "SelectionChanged" "CUMove2";}global proc CUMove2(){global string $CUCORNERS[];string $uvCorner2[] = `ls -sl -fl`;appendStringArray($CUCORNERS, $uvCorner2, `size $uvCorner2`);polyEditUV -u 0 -v 1 -r false $uvCorner2;scriptJob -ro 1 -e "SelectionChanged" "CUMove3";}global proc CUMove3(){global string $CUCORNERS[];string $uvCorner3[] = `ls -sl -fl`;appendStringArray($CUCORNERS, $uvCorner3, `size $uvCorner3`);polyEditUV -u 1 -v 1 -r false $uvCorner3;scriptJob -ro 1 -e "SelectionChanged" "CUMove4";}global proc CUMove4(){global string $CUCORNERS[];string $uvCorner4[] = `ls -sl -fl`;appendStringArray($CUCORNERS, $uvCorner4, `size $uvCorner4`);polyEditUV -u 1 -v 0 -r false $uvCorner4;polySelectBorderShell 0;select -d $CUCORNERS;unfold -i 500 -ss 0.001 -gb 0 -gmb 0.4397 -pub 0 -ps  0 -us off;}